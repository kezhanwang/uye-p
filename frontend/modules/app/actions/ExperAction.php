<?php
/**
 * Created by PhpStorm.
 * User: wangyi
 * Date: 2017/10/30
 * Time: 下午4:02
 */

namespace app\modules\app\actions;


use app\modules\app\components\AppAction;
use common\models\ar\UyeUserExperience;
use components\Output;
use components\UException;

class ExperAction extends AppAction
{
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function run()
    {
        try {
            $params = [
                'highest_education' => $this->getParams('highest_education'),
                'profession' => $this->getParams('profession'),
                'monthly_income' => $this->getParams('monthly_income'),
                'housing_situation' => $this->getParams('housing_situation'),
                'will_work_city' => $this->getParams('will_work_city'),
            ];

            $checkParams = ['highest_education', 'profession', 'monthly_income', 'housing_situation', 'will_work_city'];

            foreach ($checkParams as $checkParam) {
                if (!array_key_exists($checkParam, $params) || empty($params[$checkParam])) {
                    throw new UException(ERROR_SYS_PARAMS_CONTENT . ":" . $checkParam, ERROR_SYS_PARAMS);
                }
            }

            $will_work_city = json_decode($params['will_work_city'], true);
            if (!is_array($will_work_city)) {
                throw new UException(ERROR_SYS_PARAMS_CONTENT . ":JSON格式解析异常", ERROR_SYS_PARAMS);
            }

            $userInfo = UyeUserExperience::getByUid($this->uid);
            if (empty($userInfo)) {
                $params['uid'] = $this->uid;
                $userInfo = UyeUserExperience::_add($params);
            }

            $diff = [];
            foreach ($params as $key => $param) {
                if (array_key_exists($key, $userInfo) && $param != $userInfo[$key]) {
                    $diff[$key] = $param;
                }
            }

            if (!empty($diff)) {
                UyeUserExperience::_update($this->uid, $diff);
            }
            Output::info(SUCCESS, SUCCESS_CONTENT);
        } catch (UException $exception) {
            Output::err($exception->getCode(), $exception->getMessage());
        }
    }

}