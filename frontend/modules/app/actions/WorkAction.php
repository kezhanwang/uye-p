<?php
/**
 * Created by PhpStorm.
 * User: wangyi
 * Date: 2017/11/16
 * Time: 上午11:25
 */

namespace app\modules\app\actions;


use app\modules\app\components\AppAction;
use common\models\ar\UyeInsuredLog;
use common\models\ar\UyeInsuredOrder;
use common\models\ar\UyeInsuredWork;
use components\Output;
use components\UException;

class WorkAction extends AppAction
{
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->checkLogin();
    }

    public function run()
    {
        try {
            $params = [
                'insured_id' => $this->getParams('insured_id'),
                'date' => $this->getParams('date'),
                'work_province' => $this->getParams('work_province'),
                'work_city' => $this->getParams('work_city'),
                'work_area' => $this->getParams('work_area'),
                'work_address' => $this->getParams('work_address'),
                'work_name' => $this->getParams('work_name'),
                'position' => $this->getParams('position'),
                'monthly_income' => $this->getParams('monthly_income'),
                'is_hiring' => $this->getParams('is_hiring'),
                'pic_json' => $this->getParams('pic_json'),
            ];

            foreach ($params as $key => $param) {
                if (empty($key)) {
                    throw new UException(ERROR_SYS_PARAMS_CONTENT . ':' . $key, ERROR_SYS_PARAMS);
                }
            }

            $picArray = json_decode($params['pic_json'], true);
            if (!is_array($picArray)) {
                throw new UException(ERROR_SYS_PARAMS_CONTENT . ':数据结构异常,无法json解析', ERROR_SYS_PARAMS);
            }

            $insuredInfo = UyeInsuredOrder::getOrderByID($params['insured_id']);
            if (empty($insuredInfo)) {
                throw new UException(ERROR_INSURED_NOT_EXISTS_CONTENT, ERROR_INSURED_NOT_EXISTS);
            }

            if ($insuredInfo['uid'] != $this->uid) {
                throw new UException(ERROR_INSURED_NOT_EXISTS_CONTENT, ERROR_INSURED_NOT_EXISTS);
            }

            if ($insuredInfo['insured_status'] != INSURED_STATUS_JOB_SEARCH) {
                throw new UException(ERROR_INSURED_NOT_STATUS_CONTENT, ERROR_INSURED_NOT_STATUS);
            }

            if (!in_array($params['is_hiring'], [UyeInsuredWork::IS_HIRING_SUCCESS, UyeInsuredWork::IS_HIRING_WAIT])) {
                throw new UException(ERROR_SYS_PARAMS_CONTENT . ':is_hiring=>' . $params['is_hiring'], ERROR_SYS_PARAMS);
            }

            $params['add_type'] = UyeInsuredWork::ADD_TYPE_USER;
            $params['insured_order'] = $insuredInfo['insured_order'];

            UyeInsuredWork::_add($params);
            if ($params['is_hiring'] == UyeInsuredWork::IS_HIRING_SUCCESS) {
                $update = [
                    'insured_status' => INSURED_STATUS_WORK,
                ];
                UyeInsuredOrder::_update($insuredInfo['id'], $update);
                UyeInsuredLog::_addLog($insuredInfo['id'], $insuredInfo['insured_order'], $insuredInfo['insured_status'], INSURED_STATUS_WORK, $this->uid, json_encode($update), '');
            }
            Output::info(SUCCESS, SUCCESS);
        } catch (UException $exception) {
            Output::err($exception->getCode(), $exception->getMessage());
        }
    }
}