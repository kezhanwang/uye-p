<?php
/**
 * Created by PhpStorm.
 * User: wangyi
 * Date: 2017/10/22
 * Time: 下午5:32
 */

namespace backend\controllers;


use backend\components\AOutPut;
use backend\components\UAdminController;
use backend\models\service\InsuredModel;
use components\UException;

class InsuredController extends UAdminController
{
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function beforeAction($action)
    {
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actionIndex()
    {
        $data = InsuredModel::getInsuredList(\Yii::$app->request->queryParams);
        return $this->render('index', $data);
    }

    public function actionView($id)
    {

        $info = InsuredModel::getInsuredInfo($id);
        return $this->render('view', $info);
    }

    public function actionUpdate()
    {
        try {
            $params = [
                'id' => $this->getParams('id'),
                'remark' => $this->getParams('remark'),
                'type' => $this->getParams('type')
            ];
            if (empty($params)) {
                throw new UException(ERROR_SYS_PARAMS_CONTENT, ERROR_SYS_PARAMS);
            }
            InsuredModel::checkInsured($params);
            AOutPut::info(SUCCESS, SUCCESS_CONTENT);
        } catch (UException $exception) {
            AOutPut::err($exception->getCode(), $exception->getMessage());
        }
    }

    public function actionAuthlist()
    {
        $params = \Yii::$app->request->queryParams;
        $params['insured_status'] = INSURED_STATUS_CREATE;

        $data = InsuredModel::getInsuredList(\Yii::$app->request->queryParams);
        return $this->render('authlist', $data);
    }

    public function actionWater()
    {
        $data = InsuredModel::getWaterList(\Yii::$app->request->queryParams);
        return $this->render('water', $data);
    }

    public function actionCheckwater()
    {
        try {
            $id = $this->getParams('id');
            if (empty($id) || !is_numeric($id)) {
                throw new UException(ERROR_SYS_PARAMS_CONTENT, ERROR_SYS_PARAMS);
            }
            InsuredModel::checkWater($id);
            AOutPut::info(SUCCESS, SUCCESS_CONTENT);
        } catch (UException $exception) {
            AOutPut::err($exception->getCode(), $exception->getMessage());
        }
    }
}